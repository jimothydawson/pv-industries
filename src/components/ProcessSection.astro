---
// Props interface
export interface Props {
  sectionNumber?: string;
}

// Get props with default value
const { sectionNumber = "03" } = Astro.props;

// Process section data
const sectionData = {
  subtitle: sectionNumber.toString().padStart(2, '0'),
  title: "Our solar recycling process",
  description: "",
  steps: [
    {
      number: "01",
      title: "We arrange collection or drop off",
      variant: "primary"
    },
    {
      number: "02", 
      title: "Transport to our solar panel recycling facility",
      variant: "secondary"
    },
    {
      number: "03",
      title: "Frame, junction box and cable separation",
      variant: "tertiary"
    },
    {
      number: "04",
      title: "Glass Separation",
      variant: "primary"
    },
    {
      number: "05",
      title: "Precious metals recovery", 
      variant: "secondary"
    },
    {
      number: "06",
      title: "Materials sent for reuse in local manufacturing",
      variant: "tertiary"
    }
  ],
  actions: [
    { text: "Contact us", href: "#", primary: true },
    { text: "Testimonials", href: "#slider", primary: false }
  ]
};
---

<section id="process" class="process-section">
  <div class="container">
    <!-- Section Header -->
    <div class="section-header">
      <div class="header-content">
        <div class="subtitle-wrapper">
          <div class="subtitle-divider left"></div>
          <div class="subtitle">{sectionData.subtitle}</div>
          <div class="subtitle-divider"></div>
        </div>
        <h2 class="section-title">{sectionData.title}</h2>
        {sectionData.description && (
          <div class="section-description">
            <p>{sectionData.description}</p>
          </div>
        )}
      </div>
    </div>

    <!-- Process Steps -->
    <div class="process-steps">
      <!-- First Row -->
      <div class="steps-row">
        {sectionData.steps.slice(0, 3).map((step, index) => (
          <div class={`step-card ${step.variant}`} style={`animation-delay: ${index * 0.1}s`}>
            <div class="step-number">
              <span class="number-text">{step.number}</span>
            </div>
            <div class="step-content">
              <h3 class="step-title">{step.title}</h3>
            </div>
          </div>
        ))}
      </div>

      <!-- Second Row -->
      <div class="steps-row">
        {sectionData.steps.slice(3, 6).map((step, index) => (
          <div class={`step-card ${step.variant}`} style={`animation-delay: ${(index + 3) * 0.1}s`}>
            <div class="step-number">
              <span class="number-text">{step.number}</span>
            </div>
            <div class="step-content">
              <h3 class="step-title">{step.title}</h3>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Section Actions -->
    <div class="section-actions">
      <div class="actions-wrapper">
        {sectionData.actions.map((action) => (
          <a 
            href={action.href} 
            class={`button ${action.primary ? 'button-primary' : 'button-secondary dark'}`}
          >
            {action.text}
            {action.primary && (
              <svg class="button-icon" width="16" height="16" viewBox="0 0 16 16" fill="none">
                <path d="M6 12L10 8L6 4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            )}
          </a>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  .process-section {
    padding: var(--space-20) 0;
    background: var(--color-neutral-100);
    position: relative;
  }

  /* Section Header */
  .section-header {
    text-align: center;
    margin-bottom: var(--space-16);
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  @media (min-width: 768px) {
    .section-header {
      max-width: 500px;
    }
  }

  @media (min-width: 1024px) {
    .section-header {
      max-width: 600px;
    }
  }

  .header-content {
    max-width: 400px;
    margin: 0 auto;
  }

  @media (min-width: 768px) {
    .header-content {
      max-width: 500px;
    }
  }

  @media (min-width: 1024px) {
    .header-content {
      max-width: 600px;
    }
  }

  .subtitle-wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: var(--space-4);
    margin-bottom: var(--space-6);
  }

  .subtitle {
    font-size: var(--font-size-lg);
    font-weight: 600;
    color: var(--color-primary);
    flex-shrink: 0;
  }

  .subtitle-divider {
    height: 2px;
    background: var(--color-primary);
    width: 60px;
  }

  .subtitle-divider.left {
    width: 60px;
  }

  .section-title {
    font-size: clamp(2rem, 4vw, 2.5rem);
    font-weight: 600;
    color: var(--color-neutral-900);
    line-height: 1.2;
    margin: 0 0 var(--space-4) 0;
  }

  .section-description {
    margin-top: var(--space-4);
  }

  .section-description p {
    color: var(--color-neutral-600);
    line-height: 1.6;
    margin: 0;
  }

  /* Process Steps */
  .process-steps {
    margin-bottom: var(--space-16);
  }

  .steps-row {
    display: grid;
    gap: var(--space-6);
    margin-bottom: var(--space-6);
  }

  @media (min-width: 768px) {
    .steps-row {
      grid-template-columns: repeat(3, 1fr);
      gap: var(--space-8);
    }
  }

  .steps-row:last-child {
    margin-bottom: 0;
  }

  .step-card {
    background: var(--color-neutral-100);
    border-radius: var(--radius-xl);
    padding: var(--space-8);
    text-align: center;
    transition: all var(--transition-normal);
    border: 2px solid transparent;
    opacity: 0;
    transform: translateY(30px);
    animation: fadeInUp 0.6s ease-out forwards;
  }


  /* Step Card Variants - All start neutral */
  .step-card.primary,
  .step-card.secondary,
  .step-card.tertiary {
    background: var(--color-neutral-100);
    border-color: var(--color-neutral-300);
    color: var(--color-neutral-800);
  }

  /* Hover state - only hovered card becomes yellow */
  .step-card:hover {
    background: var(--color-primary);
    color: var(--color-neutral-100);
    border-color: var(--color-primary);
    transform: translateY(-4px);
    box-shadow: var(--shadow-lg);
  }

  .step-number {
    margin-bottom: var(--space-6);
  }

  .number-text {
    font-size: var(--font-size-3xl);
    font-weight: 600;
    line-height: 1;
  }

  .number-text {
    color: var(--color-neutral-800);
  }

  .step-card:hover .number-text {
    color: var(--color-neutral-100);
  }

  .step-content {
    max-width: 280px;
    margin: 0 auto;
  }

  .step-title {
    font-size: var(--font-size-xl);
    font-weight: 600;
    line-height: 1.3;
    margin: 0;
  }

  .step-title {
    color: var(--color-neutral-900);
  }

  .step-card:hover .step-title {
    color: var(--color-neutral-100);
  }

  /* Section Actions */
  .section-actions {
    text-align: center;
    opacity: 0;
    transform: translateY(30px);
    animation: fadeInUp 0.6s ease-out 0.6s forwards;
  }

  .actions-wrapper {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: var(--space-4);
  }

  /* Responsive adjustments */
  @media (max-width: 767px) {
    .process-section {
      padding: var(--space-16) 0;
    }

    .section-header {
      margin-bottom: var(--space-12);
    }

    .process-steps {
      margin-bottom: var(--space-12);
    }

    .steps-row {
      gap: var(--space-4);
      margin-bottom: var(--space-4);
    }

    .step-card {
      padding: var(--space-6);
    }

    .step-number {
      margin-bottom: var(--space-4);
    }

    .number-text {
      font-size: var(--font-size-2xl);
    }

    .step-title {
      font-size: var(--font-size-lg);
    }

    .actions-wrapper {
      flex-direction: column;
      align-items: center;
    }

    .button {
      justify-content: center;
      min-width: 200px;
    }
  }

  /* Animation preferences */
  @media (prefers-reduced-motion: reduce) {
    .step-card,
    .section-actions {
      opacity: 1;
      transform: none;
      animation: none;
    }

    .step-card:hover {
      transform: none;
    }
  }
</style>